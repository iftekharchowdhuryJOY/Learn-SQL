##INNER JOIN

select sum(A.count) AS A from ENGINEER  AS A
inner join DATA d
on A.ID = d.ID  and d.Type = 'FrontEnd'

INNER JOIN - at least one match in both tables.

Columns Aliases - temporary column name
Do not forget to use on clause 

Here is example: 
SELECT columns
FROM table1
INNER JOIN table2
ON table1.common_column = table2.common_column;



SELECT 
    IF(ev.Rating < 6, NULL, e.Name) AS Names , 
     ev.Rating as Rating 
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
ORDER BY 
    Rating DESC, 
    e.Name ASC;

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM EMPLOYEE; 
*/
select  count(e.Name) AS `COUNT(Name)`
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
where ev.Rating <3;


select  count(e.Name) AS `COUNT(Name)`
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
where ev.Rating > 8;


Backticks
When to Use Backticks
1. Reserved Keywords: If you want to use a reserved keyword as a column or table name.
2. Special Characters: If the identifier contains special characters (e.g., spaces, hyphens).
3. Case Sensitivity
Counting Names with a Specific Alias - SELECT COUNT(Name) AS `Count(Name)` FROM EMPLOYEE;

SELECT   l1.Name as Labourer1, l2.Name as Labourer2, l1.Country as Country
FROM     LABOURERS l1, LABOURERS l2
WHERE    l1.Country = l2.Country and l1.Name <> l2.Name
ORDER BY 1, 2, 3

select * from labour l1, labour l2 - i can make two aliases from one table. 

l1.Name <> l2.Name - ensures that a laborer is not paired with themselves.

The <> sign in SQL is a comparison operator that means "not equal to." It is used in WHERE clauses and 
other conditional expressions to filter rows based on inequality. In many SQL dialects, you can also use != to represent "not equal to.

SELECT *
FROM EMPLOYEES
WHERE Country <> 'USA';

SELECT 
ABS(
    (SELECT MAX(salary) FROM db_employee WHERE department_id = 1) - 
    (SELECT MAX(salary) FROM db_employee WHERE department_id = 4)) AS salary_difference;


To find out the highest values from the table use max()
if you want a non negative values from the output then use abs(). 

SELECT 
    ProductID, 
    ABS(Price - Cost) AS ProfitMargin
FROM 
    Products;
