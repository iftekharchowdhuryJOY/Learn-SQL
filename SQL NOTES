##INNER JOIN

select sum(A.count) AS A from ENGINEER  AS A
inner join DATA d
on A.ID = d.ID  and d.Type = 'FrontEnd'

INNER JOIN - at least one match in both tables.

Columns Aliases - temporary column name
Do not forget to use on clause 

Here is example: 
SELECT columns
FROM table1
INNER JOIN table2
ON table1.common_column = table2.common_column;



SELECT 
    IF(ev.Rating < 6, NULL, e.Name) AS Names , 
     ev.Rating as Rating 
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
ORDER BY 
    Rating DESC, 
    e.Name ASC;

/* YOUR QUERY GOES HERE
   Example: SELECT * FROM EMPLOYEE; 
*/
select  count(e.Name) AS `COUNT(Name)`
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
where ev.Rating <3;


select  count(e.Name) AS `COUNT(Name)`
FROM 
    EMPLOYEE e
INNER JOIN 
    EVALUATION ev 
ON 
    e.Points BETWEEN ev.Lower AND ev.Upper
where ev.Rating > 8;


Backticks
When to Use Backticks
1. Reserved Keywords: If you want to use a reserved keyword as a column or table name.
2. Special Characters: If the identifier contains special characters (e.g., spaces, hyphens).
3. Case Sensitivity
Counting Names with a Specific Alias - SELECT COUNT(Name) AS `Count(Name)` FROM EMPLOYEE;

SELECT   l1.Name as Labourer1, l2.Name as Labourer2, l1.Country as Country
FROM     LABOURERS l1, LABOURERS l2
WHERE    l1.Country = l2.Country and l1.Name <> l2.Name
ORDER BY 1, 2, 3

select * from labour l1, labour l2 - i can make two aliases from one table. 

l1.Name <> l2.Name - ensures that a laborer is not paired with themselves.

The <> sign in SQL is a comparison operator that means "not equal to." It is used in WHERE clauses and 
other conditional expressions to filter rows based on inequality. In many SQL dialects, you can also use != to represent "not equal to.

SELECT *
FROM EMPLOYEES
WHERE Country <> 'USA';

SELECT 
ABS(
    (SELECT MAX(salary) FROM db_employee WHERE department_id = 1) - 
    (SELECT MAX(salary) FROM db_employee WHERE department_id = 4)) AS salary_difference;


To find out the highest values from the table use max()
if you want a non negative values from the output then use abs(). 

SELECT 
    ProductID, 
    ABS(Price - Cost) AS ProfitMargin
FROM 
    Products;



SELECT 
    e.id, 
    e.first_name, 
    e.last_name, 
    e.department_id, 
    e.salary
FROM 
    ms_employee_salary e
    
JOIN (
    SELECT 
        id, 
        MAX(salary) AS max_salary
    FROM 
        ms_employee_salary
    GROUP BY 
        id
) m ON e.id = m.id AND e.salary = m.max_salary
ORDER BY 
    e.id ASC;

when you are trying to combine rows from the table use JOIN.


SQL SUB-Queries

Sub-queries are inner queries. 

1. Single-row subqueries. 
2. Multiple-row subqueries.
3. Multiple-Column subqueries.
4. Correlated subqueries. 

1. Single-row subqueries

SELECT first_name, last_name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

2. Multiple-row subqueries
Multiple-row subqueries return multiple rows and are typically used with operators like IN, ANY, ALL

SELECT first_name, last_name, department_id
FROM employees
WHERE department_id IN (SELECT department_id FROM departments WHERE location_id = 1700);

3. Multiple-Column subqueries

SELECT first_name, last_name, job_id, department_id
FROM employees
WHERE (job_id, department_id) IN (SELECT job_id, department_id FROM employees WHERE salary > 10000);

4. Correlated subqueries

Correlated subqueries reference columns from the outer query and are evaluated once for each row processed by the outer query.
SELECT first_name, last_name, salary, department_id
FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department_id = e2.department_id);

Using Subqueries in SELECT Clause
SELECT e.first_name, e.last_name, (SELECT d.department_name FROM departments d WHERE d.department_id = e.department_id) AS department_name
FROM employees e;

select * from STUDY where marks > 80;

update STUDY 
set marks = 50
where marks > 25 and marks <= 50;

select * from STUDY;

DELETE FROM table_name
WHERE condition;
Deleting specific rows: Use the WHERE clause to specify the condition for which rows to delete.

delete from STUDY 
where age >=19 and age <=22;

SELECT * from STUDY;

Distinct - it ensures each row value is unique and removes the duplicated from the data.

SELECT DISTINCT column1, column2, ...
FROM table_name;

SELECT DISTINCT department_id
FROM EMPLOYEES;

SELECT DISTINCT department_id, salary
FROM EMPLOYEES;


select sum(distinct salary) as Salary from Jobs j 
inner join 
Students s on s.Id = j.Id 
inner join Departments d on d.DepartmentId = s.DepartmentId

where  d.DepartmentName = 'CSE'
order by d.DepartmentName ASC;


SELECT customer_id, SUM(DISTINCT amount) AS total_distinct_amount
FROM SALES
GROUP BY customer_id;


Tips to remember Group By
1. Any column in the SELECT list that is not an aggregate function must be in the GROUP BY clause.
2. Aggregate functions: Use aggregate functions to get meaningful summaries like totals, averages, counts, etc.
3. Combining GROUP BY and ORDER BY: You can group your data and then sort it to make your results more readable and meaningful.

It's often used in conjunction with aggregate functions like COUNT(), SUM(), AVG(), MAX(), and MIN().



Common Aggregate Functions
COUNT(): Counts the number of rows in a set.
SUM(): Calculates the total sum of a numeric column.
AVG(): Calculates the average value of a numeric column.
MAX(): Finds the maximum value in a column.
MIN(): Finds the minimum value in a column.

select avg(PeopleSaved) from FIREFIGHTERS where CountryCode = 'PM'
when finding the difference: select (max(PeopleSaved) - min(PeopleSaved)) as A from FIREFIGHTERS;

select sqrt(pow(max(XCoordinate) - MIN(XCoordinate),2) + pow(max(YCoordinate)- MIN(YCoordinate),2)) as A
from HOUSES;


